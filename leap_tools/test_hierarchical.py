import sys
import os
from os.path import join, dirname, abspath
ROOT_DIR = abspath(join(dirname(__file__), os.pardir))
sys.path.extend([
    join(ROOT_DIR, '..'),
    join(ROOT_DIR, '..', 'pddlgym'),
    join(ROOT_DIR, '..', 'pddlstream'),
    join(ROOT_DIR, '..', 'bullet', 'pybullet-planning'),
    join(ROOT_DIR, '..', 'bullet', 'pybullet-planning', 'examples'),
    '/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages',  ## to use imgeio-ffmpeg
    # join(ROOT_DIR, '..', 'pddlstream'),
    # join(ROOT_DIR, '..', 'pddlstream', 'examples', 'pybullet', 'utils'),
])
import shutil
import copy
import time
from pprint import pprint

from pddlgym.core import PDDLEnv, _check_domain_for_strips
from pddlgym.parser import PDDLDomainParser
from pddlgym.inference import find_satisfying_assignments
from pddlgym.structs import Literal, LiteralConjunction, \
    Predicate, Type, TypedEntity, Exists, ForAll, LiteralDisjunction, DerivedPredicate
from pddlgym.spaces import LiteralSpace, LiteralSetSpace

from world_builder.entities import Object

from leap_tools.hierarchical import PDDLStreamEnv
from leap_tools.hierarchical_utils import DOMAIN_DIR, get_elem_in_tups

from pybullet_tools.logging_utils import summarize_facts
from pybullet_tools.pr2_primitives import Pose, Grasp, Conf, APPROACH_DISTANCE
from pybullet_tools.pr2_utils import TOP_HOLDING_LEFT_ARM
from pybullet_tools.utils import get_unit_vector, multiply, unit_quat
from pybullet_tools.logging_utils import myprint as print, summarize_state_changes, print_list

from pddlstream.language.constants import Action
from pddlstream.algorithms.algorithm import parse_problem


def construct_problem(domain='pr2_kitchen.pddl', problem='test_studio', exp_dir='hierarchical'):
    from pybullet_tools.utils import connect
    from cogarch_tools.cogarch_utils import parse_agent_args, get_pddlstream_problem

    args = parse_agent_args(problem, exp_dir)
    connect(use_gui=False)
    state, exogenous, goals, pddlstream_problem = get_pddlstream_problem(args, domain)

    return pddlstream_problem, state


def construct_test_plan(state):

    def pr2_grasp(grasp_type, body, value):
        approach_vector = APPROACH_DISTANCE * get_unit_vector([1, 0, 0])
        return Grasp(grasp_type, body, value,
                     multiply((approach_vector, unit_quat()), value),
                     TOP_HOLDING_LEFT_ARM)

    robot = state.robot
    def pr2_traj(arm='left'):
        from pybullet_tools.pr2_primitives import Commands, Conf, Trajectory
        from pybullet_tools.pr2_utils import get_arm_joints
        from pybullet_tools.utils import BodySaver

        arm_joints = get_arm_joints(robot, arm)
        q0 = [0] * len(arm_joints)
        path = [q0]
        mt = Trajectory(Conf(robot, arm_joints, q) for q in path)
        return Commands(state, savers=[BodySaver(robot)], commands=[mt])

    return [
        Action(name='pick',
               args=[
                   'left', 4, Pose(4, value=((4, 6, 0.95), (0, 0, 0, 1))),
                   pr2_grasp('top', 4, value=((0.02, 0, 0), (0.5, -0.5, -0.5, 0.5))),
                   Conf(0, [0, 1, 2], values=(4.269, 5.331, 0.28)),
                   pr2_traj()
               ]),
        Action(name='place',
               args=[
                   'left', 4, Pose(4, value=((1.935, 4.867, 0.951), (0, 0, -0.74, 0.67))),
                   pr2_grasp('top', 4, value=((0.02, 0, 0), (0.5, -0.5, -0.5, 0.5))),
                   Conf(0, [0, 1, 2], values=(1.307, 5.431, -1.841)),
                   pr2_traj()
               ])
    ]


def test_modified_domain():
    from leap_tools.domain_modifiers import initialize_domain_modifier
    domain_file = join(DOMAIN_DIR, 'pr2_mamao.pddl')
    domain_modifier = initialize_domain_modifier('atbconf')
    domain = PDDLStreamEnv.load_domain(domain_file, True, domain_modifier)


def test_constructed_problem():
    """ test a reconstructed PDDLStream problem and plan,
        but it doesn't have preimage generated by PDDLStream as input.
        Mainly used to test basic functionality of this script """

    current_dir = dirname(os.getcwd())
    domain_dir = join(current_dir, '..', 'bullet', 'processes', 'pddlstream_agent', 'pddl', 'domains')
    pddl_file = join(domain_dir, 'pr2_kitchen.pddl')
    pddl_file = join(domain_dir, 'pr2_eggs_no_atbconf.pddl')
    pddl_file = join(domain_dir, 'pr2_eggs.pddl')

    problem, state = construct_problem()
    abstract_plan = construct_test_plan(state)

    env = PDDLStreamEnv(pddl_file, problem, separate_base_planning=state.robot.separate_base_planning)
    env.reset()

    # action = env.to_literal(abstract_plan[0])
    # obs, reward, done, debug_info = env.step(action)

    # extended_plan = env.get_extended_plan(abstract_plan)
    # preimage = env.compute_preimage(extended_plan)

    # empty_temp()


def test_gym_problem():
    """ test native pddlgym examples. Used to learn structs """
    from pddlgym.demo import demo_random
    demo_random("blocks", render=True, verbose=True)


def test_loaded_plan():
    """ doesn't work because the reconstructed plan and preimage by pickle have different variable index """
    import pickle
    from pybullet_tools.stream_agent import print_plan

    with open(join(ROOT_DIR, 'leap','pddlstream_plan.pkl'), 'rb') as inp:
        init = pickle.load(inp)
        plan = pickle.load(inp)
        preimage = pickle.load(inp)

    summarize_facts(init, name='Init reconstructed through pickle')
    summarize_facts(preimage, name='Preimage reconstructed through pickle')
    print_plan(plan)

    pddlstream_problem, state = construct_problem(domain='pr2_eggs_no_atbconf.pddl', problem='test_four_places')
    summarize_facts(pddlstream_problem.init, name='pddlstream_problem.init reconstructed through pickle')

    ## see if those with the same values are equals
    elems_init = get_elem_in_tups(init)
    elems_preimage = get_elem_in_tups(preimage)
    elems_plan = get_elem_in_tups(plan)
    elems_problem_init = get_elem_in_tups(pddlstream_problem.init)
    print()

    # check_preimage(pddlstream_problem, plan, preimage, init)


if __name__ == '__main__':
    # test_loaded_plan()
    # test_constructed_problem()
    # test_gym_problem()
    test_modified_domain()
