import os
import random
from os import listdir
import json
import sys
from os.path import join, abspath, dirname, isdir, isfile
import argparse

R = abspath(join(dirname(__file__), os.pardir, os.pardir))
sys.path.extend([R] + [join(R, name) for name in ['pddlstream', 'pybullet_planning', 'lisdf']])

from cogarch_tools.cogarch_utils import get_default_agent_parser_given_config

from pigi_tools.replay_utils import run_replay, REPLAY_CONFIG_DEBUG

from vlm_tools import run_vlm_tamp_with_argparse, EXP_DIR


DEFAULT_EXP_SUBDIR = 'test_run_vlm_tamp_pr2_chicken_soup'


def get_vlm_tamp_agent_parser_given_config(conf):
    """ modifies the default agent parser to include VLM-TAMP specific arguments """
    parser = get_default_agent_parser_given_config(conf)
    parser.add_argument('--open_goal', type=str, default='make chicken soup',
                        help='Natural language description of the goal')
    parser.add_argument('--difficulty', type=int, default=0,
                        help='Difficulty level of the task, which the scene builder function uses to determine how much movable and articulated obstacles to add')
    parser.add_argument('--dual_arm', action='store_true',
                        help='Whether to use dual arm or single arm of the PR2 robot')
    parser.add_argument('--planning_mode', type=str, default='sequence', choices=['sequence', 'actions', 'sequence-reprompt', 'actions-reprompt'],
                        help='Whether to use dual arm or single arm of the PR2 robot')
    parser.add_argument('--load_llm_memory', type=str, default=None,
                        help='Path to a run directory that contains `llm_memory.json` file to speed up debugging')

    ## Note: in order to use other model names in GPT or Claude family, need to modify `vlm_tools/vlm_api.py` then verify that prompts and parsing functions still work.
    parser.add_argument('--vlm_type', type=str, choices=["gpt4v", "claude3"],
                        help='Specifies the VLM APT class defined in vlm_tools.vlm_api')
    return parser


def run_vlm_tamp():
    """ uses default config file in vlm_tools/configs/config_nvidia_kitchen.yaml
    to launch VLM-TAMP console, run the following in project repo (e.g kitchen-worlds)
        (cd experiments/; python -m http.server 9000)
    for VLM-TAMP console, go to:
        http://0.0.0.0:9000/latest_run/log/

    problem_name=args.scene_name, difficulty=args.difficulty, open_goal=args.open_goal,
    llamp_planning_mode=args.planning_mode, dual_arm=args.dual_arm, exp_subdir=args.exp_subdir,
    """
    run_vlm_tamp_with_argparse(get_agent_parser_given_config=get_vlm_tamp_agent_parser_given_config,
                               world_builder_args={'temp_dir': join(EXP_DIR, '_temp')})


def run_vlm_tamp_replay():
    """ replay the trajectory generated by run_vlm_tamp() the output directory as input """
    ## replace the run_name with the one you want to replay inside kitchen-worlds/experiments/{exp_subdir}/

    run_name = "241106_224210_vlm-tamp"
    exp_subdir = DEFAULT_EXP_SUBDIR

    run_replay(REPLAY_CONFIG_DEBUG, given_path=join(EXP_DIR, exp_subdir, run_name),
               save_mp4=True, save_segmented_mp4=False)


if __name__ == '__main__':
    """
    cd pybullet_planning/
    conda activate kitchen
    python tutorials/test_vlm_tamp.py --open_goal 'make salty chicken soup' --exp_subdir 'test_fun' --difficulty 1
    """
    run_vlm_tamp()
    # run_vlm_tamp_replay()
